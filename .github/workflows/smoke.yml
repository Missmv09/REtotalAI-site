name: Smoke

on:
  push:
    branches: [main]
  pull_request:

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Validate package.json files
        run: |
          node -e "const fs=require('fs');const g=require('child_process').execSync('git ls-files \"**/package.json\"').toString().trim().split('\n').filter(Boolean);for(const f of g){JSON.parse(fs.readFileSync(f,'utf8'));};console.log('✅ all package.json valid');"

      - name: Health check
        run: |
          set -e
          if [ -z "${{ secrets.RENDER_API_URL }}" ]; then
            echo "ℹ️ RENDER_API_URL not set; skipping smoke checks."
            exit 0
          fi
          code=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.RENDER_API_URL }}/health" || true)
          echo "status=$code"
          if [ "$code" != "200" ]; then
            echo "::error::Health check failed (expected 200). Got $code"
            exit 1
          fi

      - name: CORS preflight
        run: |
          set -e
          if [ -z "${{ secrets.FRONTEND_ORIGIN }}" ]; then
            echo "ℹ️ FRONTEND_ORIGIN not set; skipping preflight."
            exit 0
          fi
          headers=$(mktemp)
          code=$(curl -s -o /dev/null -w "%{http_code}" -D "$headers" -X OPTIONS "${{ secrets.RENDER_API_URL }}/api/ping" \
            -H "Origin: ${{ secrets.FRONTEND_ORIGIN }}" \
            -H "Access-Control-Request-Method: GET" || true)
          echo "preflight_status=$code"
          case "$code" in
            200|204) echo "Preflight status OK ($code)";;
            *) echo "::error::Preflight failed (expected 200/204). Got $code"; cat "$headers"; exit 1;;
          esac
          origin=$(grep -i '^access-control-allow-origin:' "$headers" | awk '{print $2}' | tr -d '\r')
          echo "allow-origin=$origin"
          if [ "$origin" != "${{ secrets.FRONTEND_ORIGIN }}" ]; then
            echo "::error::CORS allow-origin mismatch (expected ${{ secrets.FRONTEND_ORIGIN }}, got $origin)"
            cat "$headers"
            exit 1
          fi

