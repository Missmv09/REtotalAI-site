generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Org {
  id        String   @id @default(uuid())
  name      String
  deals     Deal[]
  analysisRuns AnalysisRun[]
  sharedLinks SharedLink[]
  usageLedgers UsageLedger[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deal {
  id               String   @id @default(uuid())
  org              Org      @relation(fields: [orgId], references: [id])
  orgId            String
  title            String
  purchasePrice    Float
  rehabCost        Float    @default(0)
  arv              Float?
  monthsToComplete Int      @default(0)
  sellingCostPct   Float    @default(8)
  loanType         String?
  loanPointsPct    Float?
  loanLtvPct       Float?
  loanInterestRate Float?
  holdingMonthly   Json?
  loanTerms        LoanTerms?
  holdingCosts     HoldingCosts?
  incomeAssumptions IncomeAssumptions?
  analysisRuns     AnalysisRun[]
  sharedLinks      SharedLink[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model LoanTerms {
  id          String @id @default(uuid())
  deal        Deal   @relation(fields: [dealId], references: [id])
  dealId      String @unique
  loanType    String?
  interestRate Float?
  points      Float?
  termMonths  Int?
  ltv         Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HoldingCosts {
  id              String @id @default(uuid())
  deal            Deal   @relation(fields: [dealId], references: [id])
  dealId          String @unique
  holdMonths      Int?
  taxesMonthly    Float?
  insuranceMonthly Float?
  utilitiesMonthly Float?
  hoaMonthly      Float?
  maintenanceMonthly Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model IncomeAssumptions {
  id                String @id @default(uuid())
  deal              Deal   @relation(fields: [dealId], references: [id])
  dealId            String @unique
  grossMonthlyRent  Float?
  otherMonthlyIncome Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model AnalysisRun {
  id        String   @id @default(uuid())
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  deal      Deal     @relation(fields: [dealId], references: [id])
  dealId    String
  inputs    Json
  outputs   Json
  version   String
  createdAt DateTime @default(now())
}

model UsageLedger {
  id             String   @id @default(uuid())
  org            Org      @relation(fields: [orgId], references: [id])
  orgId          String
  tool           String
  periodStartDate DateTime
  count          Int      @default(0)
  lastUsedAt     DateTime
  createdAt      DateTime @default(now())

  @@unique([orgId, tool, periodStartDate])
}

model SharedLink {
  id          String   @id @default(uuid())
  orgId       String
  org         Org      @relation(fields: [orgId], references: [id])
  dealId      String
  deal        Deal     @relation(fields: [dealId], references: [id])
  token       String   @unique
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
}

